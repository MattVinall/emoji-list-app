{"version":3,"sources":["components/DisplayEmojis.js","serviceWorker.js","index.js"],"names":["DisplayEmojis","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getEmojiData","fetch","then","resp","json","emoji","setState","data","handleChange","e","_e$target","target","id","value","defineProperty","handleClick","preventDefault","english","state","handleFavourites","favourites","concat","toConsumableArray","searchTerm","localStorage","getItem","JSON","parse","nextProps","nextState","setItem","stringify","_this2","react_default","a","createElement","className","onSubmit","handleSubmit","htmlFor","type","placeholder","onChange","name","onClick","href","filter","includes","arabic","map","item","index","obj","values","react","key","splitArr","split","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_DisplayEmojis","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55411939.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport '../App.css';\n\nclass DisplayEmojis extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\tsearchTerm: '',\n\t\t\tfavourites: [],\n\t\t\tenglish: true\n\t\t};\n\t}\n\n\tcomponentWillMount() {\n\t\tlocalStorage.getItem('favourites') &&\n\t\t\tthis.setState({\n\t\t\t\tfavourites: JSON.parse(localStorage.getItem('favourites'))\n\t\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getEmojiData();\n\t}\n\n\tgetEmojiData = () => {\n\t\tconst url = 'http://localhost:3001/emojis';\n\t\tfetch(url).then((resp) => resp.json()).then((emoji) => {\n\t\t\tthis.setState({\n\t\t\t\tdata: emoji\n\t\t\t});\n\t\t});\n\t};\n\n\thandleChange = (e) => {\n\t\tconst { id, value } = e.target;\n\t\tthis.setState({\n\t\t\t[id]: value\n\t\t});\n\t};\n\n\thandleClick = (e) => {\n\t\te.preventDefault();\n\t\tthis.setState({\n\t\t\tenglish: !this.state.english\n\t\t});\n\t};\n\n\thandleFavourites = (e) => {\n\t\te.preventDefault();\n\t\tthis.setState({\n\t\t\tfavourites: [ ...this.state.favourites, e.target.value ]\n\t\t});\n\t};\n\n\tcomponentWillUpdate(nextProps, nextState) {\n\t\tlocalStorage.setItem('favourites', JSON.stringify(nextState.favourites));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"title\">Emoji App</h1>\n\t\t\t\t<form className=\"searchBar\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t<label htmlFor=\"searchTerm\">Search Emojis:</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"search your favourite emojis\"\n\t\t\t\t\t\tid=\"searchTerm\"\n\t\t\t\t\t\tvalue={this.state.searchTerm}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tname=\"searchTerm\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={this.handleClick}>\n\t\t\t\t\t\t{this.state.english ? <p>Change to Arabic</p> : <p>Change to English</p>}\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t\t<div className=\"linkContainer wrapper\">\n\t\t\t\t\t<a href=\"#favourites\" className=\"favouritesLink\">\n\t\t\t\t\t\tGo To Favourites\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"emojiContainer wrapper\">\n\t\t\t\t\t{this.state.data ? (\n\t\t\t\t\t\tthis.state.data\n\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t(data) =>\n\t\t\t\t\t\t\t\t\tdata.english.includes(this.state.searchTerm) ||\n\t\t\t\t\t\t\t\t\tdata.arabic.includes(this.state.searchTerm)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.map((item, index) => {\n\t\t\t\t\t\t\t\tconst obj = Object.values(item);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t<div key={index} className=\"card\">\n\t\t\t\t\t\t\t\t\t\t\t{this.state.english ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"emoji\">{item.emoji} </h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"description\">{item.english}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"submit\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.handleFavourites}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={obj}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd to Favourites\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"emoji\">{item.emoji} </h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"description\">{item.arabic}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"submit\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.handleFavourites}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={obj}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd to Favourites\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t<section className=\"favourites\" id=\"favourites\">\n\t\t\t\t\t\t<h2>Favourite Emojis</h2>\n\t\t\t\t\t\t<div className=\"favouritesContainer\">\n\t\t\t\t\t\t\t{this.state.favourites &&\n\t\t\t\t\t\t\t\tthis.state.favourites.map((item) => {\n\t\t\t\t\t\t\t\t\tlet splitArr = item.split(',');\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t\t\t\t\t\t{this.state.english ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"emoji\">{splitArr[0]}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"description\">{splitArr[1]}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"emoji\">{splitArr[0]}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"description\">{splitArr[2]}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DisplayEmojis;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DisplayEmojis from './components/DisplayEmojis';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DisplayEmojis />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}